# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: umbra.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
from . import umbra_pb2


class BrokerBase(abc.ABC):

    @abc.abstractmethod
    async def Manage(self, stream: 'grpclib.server.Stream[umbra_pb2.Config, umbra_pb2.Report]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/umbra.Broker/Manage': grpclib.const.Handler(
                self.Manage,
                grpclib.const.Cardinality.UNARY_UNARY,
                umbra_pb2.Config,
                umbra_pb2.Report,
            ),
        }


class BrokerStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Manage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/umbra.Broker/Manage',
            umbra_pb2.Config,
            umbra_pb2.Report,
        )


class ScenarioBase(abc.ABC):

    @abc.abstractmethod
    async def Establish(self, stream: 'grpclib.server.Stream[umbra_pb2.Workflow, umbra_pb2.Status]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/umbra.Scenario/Establish': grpclib.const.Handler(
                self.Establish,
                grpclib.const.Cardinality.UNARY_UNARY,
                umbra_pb2.Workflow,
                umbra_pb2.Status,
            ),
        }


class ScenarioStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Establish = grpclib.client.UnaryUnaryMethod(
            channel,
            '/umbra.Scenario/Establish',
            umbra_pb2.Workflow,
            umbra_pb2.Status,
        )


class MonitorBase(abc.ABC):

    @abc.abstractmethod
    async def Listen(self, stream: 'grpclib.server.Stream[umbra_pb2.Instruction, umbra_pb2.Evaluation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/umbra.Monitor/Listen': grpclib.const.Handler(
                self.Listen,
                grpclib.const.Cardinality.UNARY_UNARY,
                umbra_pb2.Instruction,
                umbra_pb2.Evaluation,
            ),
        }


class MonitorStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Listen = grpclib.client.UnaryUnaryMethod(
            channel,
            '/umbra.Monitor/Listen',
            umbra_pb2.Instruction,
            umbra_pb2.Evaluation,
        )


class AgentBase(abc.ABC):

    @abc.abstractmethod
    async def Probe(self, stream: 'grpclib.server.Stream[umbra_pb2.Instruction, umbra_pb2.Evaluation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/umbra.Agent/Probe': grpclib.const.Handler(
                self.Probe,
                grpclib.const.Cardinality.UNARY_UNARY,
                umbra_pb2.Instruction,
                umbra_pb2.Evaluation,
            ),
        }


class AgentStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Probe = grpclib.client.UnaryUnaryMethod(
            channel,
            '/umbra.Agent/Probe',
            umbra_pb2.Instruction,
            umbra_pb2.Evaluation,
        )
